{{ if .Values.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: initialize-spaceone-{{ randAlphaNum 5 | lower }}
  namespace: {{ .Values.global.namespace | default .Release.Namespace }}
  labels:
    helm.stargate.spaceone.dev/service: initialize-spaceone
{{ include "spaceone.labels" . | indent 4 }}
spec:
  activeDeadlineSeconds: 3000
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        helm.stargate.spaceone.dev/service: initialize-spaceone
{{ include "spaceone.labels" . | indent 8 }}
    spec:
      restartPolicy: Never
      initContainers:
        - name: job-0-msa-health-check
          image: networld/grpcurl
          imagePullPolicy: IfNotPresent
          # runs for 15 seconds; echoes job name and timestamp
          command:
            - sh
            - -c
            - >
              cp /grpcurl /usr/local/bin/grpcurl;
              while true;
              do

{{ if .Values.skip_health_check }}
                echo "Skip Health Check"
                break
{{ end }}
                echo GRPC HealthCheck for microservices

                ! grpcurl -plaintext config:50051 spaceone.api.core.v1.ServerInfo/get_version;
                config=$?;

                ! grpcurl -plaintext identity:50051 spaceone.api.core.v1.ServerInfo/get_version;
                identity=$?;

                ! grpcurl -plaintext inventory:50051 spaceone.api.core.v1.ServerInfo/get_version;
                inventory=$?;

                ! grpcurl -plaintext monitoring:50051 spaceone.api.core.v1.ServerInfo/get_version;
                monitoring=$?;

                ! grpcurl -plaintext repository:50051 spaceone.api.core.v1.ServerInfo/get_version;
                repository=$?;

                ! grpcurl -plaintext plugin:50051 spaceone.api.core.v1.ServerInfo/get_version;
                plugin=$?;

                ! grpcurl -plaintext secret:50051 spaceone.api.core.v1.ServerInfo/get_version;
                secret=$?;

                ! grpcurl -plaintext statistics:50051 spaceone.api.core.v1.ServerInfo/get_version;
                statistics=$?;

                if [[ $(( $config * $identity * $inventory * $monitoring * $repository * $plugin * $secret * $statistics )) -ne 0 ]];
                then
                  echo "Success. All microservices are available."
                  sleep 30
                  break;
                else
                  echo "[Error] Failed to connect some microservices"
                fi

                sleep 1;
              done
          # Do for Root Domain
        - name: job-1-spacectl-conf-writable
          imagePullPolicy: IfNotPresent
          image: busybox
          command:
            - sh
            - -c
            - cp -r /root/initializer/spaceconfig/* /root/.spaceone
          volumeMounts:
            - mountPath: /root/.spaceone
              name: writable-spacectl-conf

            - mountPath: /root/initializer/spaceconfig/environment.yml
              name: spacectl-environment-conf
              subPath: environment.yml
            - mountPath: /root/initializer/spaceconfig/environments/helm-root.yml
              name: spacectl-environment-conf
              subPath: helm-root.yml

        - name: job-2-initialize-spaceone-root-domain
          image: {{ .Values.image.name }}:{{ .Values.image.version }}
          imagePullPolicy: {{ .Values.imagePullPolicy}}
          command:
            - sh
            - /root/initialize.sh
          volumeMounts:
            - mountPath: /root/initialize.sh
              name: start-script-conf
              subPath: initialize.sh

            - mountPath: /root/.spaceone
              name: writable-spacectl-conf
            - mountPath: /root/spacectl/apply
              name: spacectl-apply-files-root-conf
            - mountPath: /root/spacectl/main.yaml
              name: spacectl-main-root-conf
              subPath: main.yaml

          # Do for User Domain
        - name: job-4-initialize-spaceone-user-domain
          image: {{ .Values.image.name }}:{{ .Values.image.version }}
          imagePullPolicy: {{ .Values.imagePullPolicy}}
          command:
            - sh
            - /root/initialize.sh
          volumeMounts:
            - mountPath: /root/initialize.sh
              name: start-script-conf
              subPath: initialize.sh

            - mountPath: /root/.spaceone
              name: writable-spacectl-conf
            - mountPath: /root/spacectl/apply
              name: spacectl-apply-files-user-conf
            - mountPath: /root/spacectl/main.yaml
              name: spacectl-main-user-conf
              subPath: main.yaml

  # I don't really need the 'containers', but syntax requires 
  # it so, I'm using it as a place where I can report the 
  # completion status
      containers:
      - name: job-done
        image: busybox
        command: ['sh', '-c', 'echo "SpaceONE Initialized!"']
      volumes:
        - name: start-script-conf
          configMap:
            name: start-script-conf
        - name: spacectl-environment-conf
          configMap:
            name: spacectl-environment-conf
        #- name: writable-spacectl-root-conf
        #  emptyDir: {}
        - name: writable-spacectl-conf
          emptyDir: {}
          # for Root Domain
        - name: spacectl-apply-files-root-conf
          configMap:
            name: spacectl-apply-files-root-conf
        - name: spacectl-main-root-conf
          configMap:
            name: spacectl-main-root-conf
          # for User Domain
        - name: spacectl-apply-files-user-conf
          configMap:
            name: spacectl-apply-files-user-conf
        - name: spacectl-main-user-conf
          configMap:
            name: spacectl-main-user-conf
 {{ end }}
